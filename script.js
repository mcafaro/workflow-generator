'use strict';

function parseRepo(input) {
    try {
        const url = new URL(input);
        const parts = url.pathname.split('/').filter(Boolean);
        return parts.length >= 2 ? { owner: parts[0], repo: parts[1] } : null;
    } catch {
        const parts = input.split('/').filter(Boolean);
        return parts.length === 2 ? { owner: parts[0], repo: parts[1] } : null;
    }
}

function createWorkflow() {
    const useBatchToken = document.getElementById('useBatchToken').checked;
    const useVirtualDisplay = document.getElementById('useVirtualDisplay').checked;
    const buildAcrossPlatforms = document.getElementById('buildAcrossPlatforms').checked;

    const yamlObject = {
        name: 'MATLAB',
        on: {
            push: { branches: ['main'] },
            pull_request: { branches: ['main'] },
            workflow_dispatch: {},
        },
        ...(useBatchToken && {
            env: { MLM_LICENSE_TOKEN: '${{ secrets.MyToken }}' }
        }),
        jobs: {
            build: {
                ...(buildAcrossPlatforms
                    ? {
                        strategy: {
                            matrix: {
                                os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
                            }
                        },
                        'runs-on': '${{ matrix.os }}'
                    }
                    : { 'runs-on': 'ubuntu-latest' }),
                steps: [
                    {
                        uses: 'actions/checkout@v4'
                    },
                    ...(useVirtualDisplay
                        ? [{
                            name: 'Start virtual display server',
                            if: "runner.os == 'Linux'",
                            run: [
                                'sudo apt-get install -y xvfb',
                                'Xvfb :99 &',
                                'echo "DISPLAY=:99" >> $GITHUB_ENV'
                            ].join('\n')
                        }]
                        : []),
                    {
                        name: 'Set up MATLAB',
                        uses: 'matlab-actions/setup-matlab@v2',
                        with: {
                            release: 'latest',
                            products: 'MATLAB',
                            cache: 'true',
                        }
                    },
                    {
                        name: 'Run MATLAB tests',
                        uses: 'matlab-actions/run-tests@v2',
                    },
                ]
            }
        }
    };

    let yaml = jsyaml.dump(yamlObject, { lineWidth: -1, noCompatMode: true, noArrayIndent: true });
    yaml = '# This workflow was generated by https://mcafaro.github.io/workflow-generator\n\n' + yaml
        .replace(/^'on':/m, 'on:')
        .replace(/'true'/g, 'true')
        .replace(/branches:\n\s*-\s*(\w+)/g, 'branches: [$1]')
        .replace(/os:\n\s*-\s*(\S+)\n\s*-\s*(\S+)\n\s*-\s*(\S+)/, 'os: [$1, $2, $3]')
        .replace(/^(on:)/m, '\n$1')
        .replace(/^(env:)/m, '\n$1')
        .replace(/^(jobs:)/m, '\n$1')
        .replace(/^(\s*)- name:/gm, '\n$1- name:');

    return yaml;
}


document.getElementById('createForm').addEventListener('submit', function (e) {
    e.preventDefault();

    const repoField = document.getElementById('repo');

    const repoInfo = parseRepo(repoField.value.trim());
    if (!repoInfo) {
        repoField.classList.add('is-invalid');
        return false;
    }
    repoField.classList.remove('is-invalid');

    const workflow = createWorkflow();
    const encoded = encodeURIComponent(workflow);

    const filePath = '.github/workflows/matlab.yml';
    const url = `https://github.com/${repoInfo.owner}/${repoInfo.repo}/new/main?filename=${filePath}&value=${encoded}`;
    window.location.href = url;
});

document.getElementById('downloadButton').addEventListener('click', function (e) {
    e.preventDefault();

    const workflow = createWorkflow();
    const blob = new Blob([workflow], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = 'matlab.yml';
    a.click();
    URL.revokeObjectURL(url);
});

document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
    new bootstrap.Tooltip(el);
});
